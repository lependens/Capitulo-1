import pandas as pd
import numpy as np
import math
import os
from datetime import datetime
import warnings

# Path to data
data_path = r'C:/Users/josep/OneDrive/Documentos/GitHub/Capitulo-1/datos_siar_baleares'

# Function to convert DMS string to decimal degrees
def dms_to_dd(dms_str):
    if pd.isna(dms_str):
        raise ValueError("NaN in dms_str")
    dms_str = str(dms_str).strip()
    if dms_str.replace('.', '', 1).isdigit() or '.' in dms_str:
        return float(dms_str)
    if len(dms_str) < 7:
        raise ValueError(f"Too short dms_str: {dms_str}")
    direction = dms_str[-1].upper()
    if direction not in ['N', 'S', 'E', 'W']:
        raise ValueError(f"Invalid direction in dms_str: {dms_str}")
    dms = dms_str[:-1]
    dd = int(dms[0:2])
    mm = int(dms[2:4])
    ss = int(dms[4:6])
    ms = int(dms[6:]) if len(dms) > 6 else 0
    seconds = ss + ms / 1000.0
    decimal = dd + mm / 60.0 + seconds / 3600.0
    if direction in ['S', 'W']:
        decimal = -decimal
    return decimal

# Read stations data with normalization
estaciones_df = pd.read_csv(os.path.join(data_path, 'estaciones_baleares.csv'), sep=',', encoding='utf-8-sig', quotechar='"', engine='python')
print("Columnas detectadas en catálogo:", estaciones_df.columns.tolist())  # Debug: debería ser 11 columnas
estaciones_df['Codigo'] = estaciones_df['Codigo'].astype(str).str.strip().str.upper()

# ... (el resto de funciones iguales: saturation_vapor_pressure, etc., copia de la versión corregida anterior)

# Main processing function
def process_station_data(code, estaciones_df):
    code = code.upper().strip()  # Normaliza input
    station_file = os.path.join(data_path, f'{code}_datos_depurados.csv')
    if not os.path.exists(station_file):
        print(f"File {station_file} not found. Check data files.")
        return None
    
    matching_stations = estaciones_df[estaciones_df['Codigo'] == code]
    if matching_stations.empty:
        print(f"No station found with code {code}. Available codes: {', '.join(sorted(estaciones_df['Codigo'].unique()))}")
        return None
    
    station_info = matching_stations.iloc[0]
    lat = dms_to_dd(station_info['Latitud'])
    z = station_info['Altitud']
    
    df = pd.read_csv(station_file, sep=',', encoding='utf-8-sig')
    # ... (resto del loop igual, con df.at[idx, 'Ra'] = Ra)

    # (copia el loop completo de la versión anterior corregida)

    output_file = os.path.join(data_path, f'{code}_et0_calc.csv')
    df.to_csv(output_file, index=False)
    print(f"Processed {code}, saved to {output_file}")
    return df

# Interactive
while True:
    code = input("Enter station code (e.g., IB01) or 'quit' to exit: ").strip()
    if code.lower() == 'quit':
        break
    process_station_data(code, estaciones_df)
    print("\n")